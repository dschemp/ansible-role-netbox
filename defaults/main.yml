---
netbox_version: "3.6.5"
netbox_url: "https://github.com/netbox-community/netbox/archive/refs/tags/v{{ netbox_version }}.tar.gz"

netbox_path: "/opt/netbox"

netbox_user: "netbox"
netbox_group: "netbox"

## In most cases the default Python should suffice, but in cases where an older Python version
## is set as default than is required, the path can be set to the newer / needed version of Python.
## Like "/usr/bin/python3.8"
netbox_python_path: "python3"

##
## ATTENTION!
## Commented variables use the default values as defined by Netbox, not Ansible!
## Values of commented variables don't necessarily represent the default value used.
## See https://docs.netbox.dev/en/stable/configuration/ and the configuration template.
##

# --------------------
# System configuration
# --------------------

## This key is used for secure generation of random numbers and strings. It must never be exposed outside of this file.
## For optimal security, SECRET_KEY should be at least 50 characters in length and contain a mix of letters, numbers, and
## symbols. NetBox will not run without this defined. For more information, see
## https://docs.djangoproject.com/en/stable/ref/settings/#std:setting-SECRET_KEY
## If non is provided, the role will create and store a secret key on the target system.
# netbox_secret_key: ""

## Set to true to enable server debugging.
## WARNING: Debugging introduces a substantial performance penalty and may reveal
## sensitive information about your installation.
## Only enable debugging while performing testing. Never enable debugging on a production system.
# netbox_debug_mode_enabled: false

## Set the default preferred language/locale
# netbox_default_language: "en-us"

## This repository is used to check whether there is a new release of NetBox available.
## Define the variable to enable version checking.
# netbox_check_for_updates_url: "https://api.github.com/repos/netbox-community/netbox/releases"

## Setting this to true will display a "maintenance mode" banner at the top of every page.
## Additionally, NetBox will no longer update a user's "last active" time upon login.
## This is to allow new logins when the database is in a read-only state.
## Recording of login times will resume when maintenance mode is disabled.
# netbox_maintenance_mode_enabled: false

## Enables anonymous census reporting. To opt in of census reporting, set this to true.
# netbox_census_reporting_enabled: true

## Time zone
# netbox_timezone: "UTC"

## Banner shown at the bottom of each page.
# netbox_banner_bottom: ""
## Banner shown at the top of each page.
# netbox_banner_top: ""
## Banner shown at the login page.
# netbox_banner_login: ""
## Banner shown when in maintenance mode.
# netbox_banner_maintenance: ""

# ---------------------
# Plugins configuration
# ---------------------

## Enable installed plugins. Add the name of each plugin to the list.
# netbox_plugins: []
## Plugins configuration settings. These settings are used by various plugins that the user may have installed.
## Each key in the dictionary is the name of an installed plugin and its value is a dictionary of settings.
# netbox_plugins_configuration: {}

# ----------------------
# Security configuration
# ----------------------

## Permit the retrieval of API tokens after their creation.
# netbox_retrospective_api_token_access_allowed: false

## IP addresses recognized as internal to the system.
## The debugging toolbar will be available only to clients accessing NetBox from an internal IP.
# netbox_internal_ips: ["127.0.0.1", "::1"]

# ---------------------
# Network configuration
# ---------------------

## The IP address (typically localhost) and port that the NetBox WSGI process should listen on.
## This setup requires a front-facing reverse proxy that serves static files.
netbox_listen_address: "127.0.0.1:8001"

## This is a list of valid fully-qualified domain names (FQDNs) for the NetBox server. NetBox will not permit write
## access to the server via any other hostnames. The first FQDN in the list will be treated as the preferred name.
##
## Example: ["netbox.example.com", "netbox.internal.local"]
netbox_allowed_hosts: ["*"]

## Base URL path if accessing NetBox within a directory.
## For example, if installed at https://example.com/netbox/, set to "netbox/"
# netbox_url_base_path: ""

## Expose Prometheus monitoring metrics at the HTTP endpoint "/metrics"
# netbox_metrics_enabled: false

## If set to true, all origins will be allowed.
# netbox_cors_origin_allow_all: false
## Otherwise, define a list of allowed origins using either
## netbox_cors_origin_whitelist or netbox_cors_origin_regex_whitelist.
## For more information, see https://github.com/ottoyiu/django-cors-headers
# netbox_cors_origin_whitelist: []
# netbox_cors_origin_regex_whitelist: []

## HTTP proxies NetBox should use when sending outbound HTTP requests (e.g. for webhooks).
# netbox_proxy_http: ""
# netbox_proxy_https: ""

# ----------------------
# Database configuration
# ----------------------

netbox_db_host: "localhost"
netbox_db_port: 5432
netbox_db_name: "netbox"
netbox_db_username: "netbox"
netbox_db_password: "netbox"
netbox_db_connection_max_age: 300

# -------------------
# Redis configuration
# -------------------

## Redis is used for caching and for queuing background tasks such as webhook events.
## A separate configuration exists for each. Full connection details are required in both sections,
## and it is strongly recommended to use two separate database IDs.

netbox_redis_tasks_host: "localhost"
netbox_redis_tasks_port: 6379
netbox_redis_tasks_username: ""
netbox_redis_tasks_password: ""
netbox_redis_tasks_database: 0
netbox_redis_tasks_use_ssl: false
## Set this to true to skip TLS certificate verification
## This can expose the connection to attacks, be careful
netbox_redis_tasks_skip_ssl_verification: false
## Set a path to a certificate authority, typically used with a self signed certificate.
## File must already exist on the target machine!
# netbox_redis_tasks_ca_cert_path: "/etc/ssl/certs/ca.crt"

netbox_redis_cache_host: "{{ netbox_redis_tasks_host }}"
netbox_redis_cache_port: "{{ netbox_redis_tasks_port }}"
netbox_redis_cache_username: "{{ netbox_redis_tasks_username }}"
netbox_redis_cache_password: "{{ netbox_redis_tasks_password }}"
netbox_redis_cache_database: "{{ netbox_redis_tasks_database | int + 1 }}"
netbox_redis_cache_use_ssl: "{{ netbox_redis_tasks_use_ssl }}"
## Set this to true to skip TLS certificate verification
## This can expose the connection to attacks, be careful
netbox_redis_cache_skip_ssl_verification: "{{ netbox_redis_tasks_skip_ssl_verification }}"
## Set a path to a certificate authority, typically used with a self signed certificate.
## File must already exist on the target machine!
netbox_redis_cache_ca_cert_path: "{{ netbox_redis_tasks_ca_cert_path }}"

# -------------------
# Email configuration
# -------------------

netbox_email_host: "localhost"
netbox_email_port: 25
netbox_email_username: ""
netbox_email_password: ""
netbox_email_use_ssl: false
netbox_email_use_tls: false
netbox_email_timeout: 10
netbox_email_from_email: ""

# ------------------
# User configuration
# ------------------

# If no password is supplied, the user is created but is unable to login until a password is set.
# netbox_superusers: []
# netbox_superusers:
#   - username: "f_admin"
#     email: "admin@example.org"
#   - username: "f_automation"
#     email: "automation@example.org"
#     password: "automation4life123!"

## Specify one or more name and email address tuples representing NetBox administrators.
## These people will be notified of application errors (assuming correct email settings are provided).
# netbox_admins: []
# netbox_admins:
#   - name: John Doe
#     email: jdoe@example.com

# -----------------------------
# Login / Session configuration
# -----------------------------

## Setting this to True will permit only authenticated users to access any part of NetBox. By default, anonymous users
## are permitted to access most data in NetBox but not make any changes.
# netbox_login_required: true
## Automatically reset the lifetime of a valid session upon each authenticated request. Enables users to remain
## authenticated to NetBox indefinitely.
# netbox_login_session_persist: false
## The length of time (in seconds) for which a user will remain logged into the web UI before being prompted to
## re-authenticate. (Default: 1209600 [14 days])
# netbox_login_session_timeout: 1209600

## The name to use for the CSRF token cookie.
# netbox_csrf_cookie_name: "csrftoken"

## The name to use for the session cookie.
# netbox_session_cookie_name: "sessionid"

# ---------------------------
# Gunicorn WSGI configuration
# ---------------------------

## Number of gunicorn workers to spawn.
## This should typically be 2n+1, where n is the number of CPU cores present.
netbox_gunicorn_workers: "{{ (ansible_processor_vcpus * 2) + 1 }}"
## Number of threads per worker process
netbox_gunicorn_threads: 5
## Timeout (in seconds) for a request to complete
netbox_gunicorn_request_timeout: 120

# ------------------------------------
# Request Worker (RQ) Service configuration
# ------------------------------------

## Worker queues for the RQ to handle.
netbox_request_worker_queues: ["high", "default", "low"]
