---
- name: "Generate a secret key if not provided by user."
  when: "netbox_secret_key is undefined"
  become: true
  become_user: "{{ netbox_user }}"
  block:
    - name: "Check if keyfile exists."
      ansible.builtin.stat:
        path: "{{ __netbox_secret_key_path }}"
      register: "__netbox_secret_key_stat"

    - name: "Generate secret key."
      when: "not __netbox_secret_key_stat.stat.exists"
      ansible.builtin.command:
        cmd: "{{ netbox_python_path }} {{ netbox_path }}/netbox/generate_secret_key.py"
      changed_when: false
      register: "__netbox_secret_key_generated"

    - name: "Store secret key in keyfile."
      when: "not __netbox_secret_key_stat.stat.exists"
      ansible.builtin.copy:
        content: |
          {{ __netbox_secret_key_generated.stdout }}
        dest: "{{ __netbox_secret_key_path }}"
        mode: "0400"

    - name: "Read secret key."
      ansible.builtin.slurp:
        path: "{{ __netbox_secret_key_path }}"
      register: "__netbox_secret_key_slurp"

    - name: "Set secret key fact."
      ansible.builtin.set_fact:
        netbox_secret_key: "{{ __netbox_secret_key_slurp.content | b64decode | trim }}"

- name: "Copy configuration."
  become: true
  ansible.builtin.template:
    src: "configuration.py.j2"
    dest: "{{ netbox_path }}/netbox/netbox/configuration.py"
    owner: "{{ netbox_user }}"
    group: "{{ netbox_group }}"
    mode: "0440"
  notify:
    - "Run upgrade script."
    - "Restart services."

- name: "Copy LDAP configuration."
  when: "netbox_ldap_enabled | bool"
  become: true
  ansible.builtin.template:
    src: "ldap_config.py.j2"
    dest: "{{ netbox_path }}/netbox/netbox/ldap_config.py"
    owner: "{{ netbox_user }}"
    group: "{{ netbox_group }}"
    mode: "0440"
  notify:
    - "Restart services."

- name: "Copy gunicorn configuration."
  become: true
  ansible.builtin.template:
    src: "gunicorn.py.j2"
    dest: "{{ netbox_path }}/gunicorn.py"
    owner: "{{ netbox_user }}"
    group: "{{ netbox_group }}"
    mode: "0440"
  notify:
    - "Run upgrade script."
    - "Restart services."

- name: "Set local Python requirements."
  become: true
  ansible.builtin.copy:
    content: |
      {% for line in netbox_additional_python_requirements %}
      {{ line }}
      {% endfor %}
    dest: "{{ netbox_path }}/local_requirements.txt"
    owner: "{{ netbox_user }}"
    group: "{{ netbox_group }}"
    mode: "0640"
  notify:
    - "Run upgrade script."
    - "Restart services."

- name: "Flush handlers."
  ansible.builtin.meta: "flush_handlers"
